from calc_header import TableHelper
import glob
from bs4 import BeautifulSoup
from tqdm import tqdm

def remax(x, val):
	return val if (x is None or x < val) else x

def parse_table(table):
	# Calculate no of rows and columns
	numRows = None
	numCols = None
	for row in table.find_all("row"):
		numRows = remax(numRows, int(row['row']))
		for cell in row.find_all("cell"):
			numCols = remax(numCols, int(cell['col-end']))
			numRows = remax(numRows, int(cell['row-end']))
	numRows += 1
	numCols += 1
	# Fill the table in arr
	arr = [[None]*numCols for i in range(numRows)]
	for row in table.find_all("row"):
		for cell in row.find_all("cell"):
			for i in range(int(cell['row-start']), int(cell['row-end'])+1):
				for j in range(int(cell['col-start']), int(cell['col-end'])+1):
					assert(arr[i][j] is None)
					arr[i][j] = cell['text']
	for i in range(numRows):
		for j in range(numCols):
			assert(arr[i][j] is not None)
	# Calculate no. of header rows
	numHeaders = TableHelper.calc_header(arr, numRows, numCols, table)
	# Merge header rows
	final_arr = [['\n'.join([arr[i][j] for i in range(numHeaders)]) for j in range(numCols)]]
	for i in range(numHeaders, numRows):
		final_arr.append(arr[i])
	return numHeaders, numRows, numCols, final_arr

def main():
	train_auto_files = sorted(glob.glob('/home/devanshg27/semtabfact/xml/train_auto/autogenerated_train_v1.3.2/output/*.xml'))
	train_man_files = sorted(glob.glob('/home/devanshg27/semtabfact/xml/train_man/v1.3.2/output/*.xml'))
	dev_files = sorted(glob.glob('/home/devanshg27/semtabfact/xml/dev/v1.1/output/*.xml'))
	test_a_files = sorted(glob.glob('/home/devanshg27/semtabfact/xml/test_a/*.xml'))
	test_b_files = sorted(glob.glob('/home/devanshg27/semtabfact/xml/test_b/*.xml'))

	train_man_html = sorted(glob.glob('/home/devanshg27/semtabfact/xml/train_man/v1.3.2/input/*.html'))
	train_auto_html = sorted(glob.glob('/home/devanshg27/semtabfact/xml/train_auto/autogenerated_train_v1.3.2/input/*.html'))
	dev_html = sorted(glob.glob('/home/devanshg27/semtabfact/xml/dev_html/html/*.html'))

	print(len(train_auto_files))
	print(len(train_man_files))
	print(len(dev_files))
	print(len(test_a_files))
	print(len(test_b_files))

	print(len(train_auto_html))
	print(len(train_man_html))
	print(len(dev_html))

	total_tables = 0
	tables_with_thead = 0
	correctPrediction = 0
	error_one = 0

	for file, html_file in tqdm(zip(train_auto_files, train_auto_html), total=867):
		with open(file) as f:
			with open(html_file) as f_html:
				og_tables = {}
				html_tables = {}

				soup = BeautifulSoup(f, 'xml')
				tables = soup.find_all("table")
				soup_html = BeautifulSoup(f_html, "html.parser")
				tables2 = soup_html.find_all("table")
				assert(len(tables) == len(tables2))
				for t1, t2 in zip(tables, tables2):
					assert(t1['id'] not in og_tables)
					og_tables[t1['id']] = t1
					assert(len(t2.find_all('label')) >= 1)
					assert(t2.find_all('label')[0].string.strip() not in html_tables)
					html_tables[t2.find_all('label')[0].string.strip()] = t2
					# Calculate number of table with thead and total no of tables
					total_tables += 1
					if len(t2.find_all("thead")) > 0:
						assert(len(t2.find_all("thead")) == 1)
						tables_with_thead += 1

				assert(og_tables.keys() == html_tables.keys())
				for k, t1 in og_tables.items():
					t2 = html_tables[k]
					if len(t2.find_all("thead")) == 0:
						continue
					num_headers = len(t2.find_all("thead")[0].find_all('tr'))
					numHeaders, numRows, numCols, arr = parse_table(t1)
					if num_headers == numHeaders:
						correctPrediction += 1
					else:
						if numHeaders == num_headers + 1 or numHeaders + 1 == num_headers:
							error_one += 1
						print(numHeaders, num_headers, file, t1['id'])


	print(total_tables, tables_with_thead, correctPrediction, error_one)

if __name__ == "__main__":
	# execute only if run as a script
	main()